>> Login and change your password:

    $ passwd

>> Change user to root user:

    $ su - root

>> Create user hessam if needed:

    # adduser hessam
    # usermod -aG sudo hessam

>> Change SSH port if needed:

    # nano /etc/ssh/sshd_config
    -> Change the line "Port ???".
    -> DO IT FOR SECURITY REASONS, TO SOME PORT OTHER THAN 22.
    # service sshd restart

>> Upgrade Ubuntu packages:

    # apt update && apt upgrade -y && apt dist-upgrade && apt autoremove -y

>> Upgrade Ubuntu version:

    # reboot   # Maybe it's required after the previous step
    -> VERY IMPORTANT:
       The following command changes the port of the SSH deamon,
       it is very important to note to its initial message.
    # apt install update-manager-core; do-release-upgrade -d
    -> To check if the version has been updated successfully
    # lsb_release -a

>> Install some Debian packages:

    # apt-get update && apt-get install -y build-essential python2.7 bind9 nginx nano zip unzip curl

>> Pre-config Nginx:

    # nano /etc/nginx/nginx.conf
    -> Uncomment the line "server_tokens off;"
    -> Add the line "client_max_body_size 20M;" to http or server or location context
       to increase the size limit for file upload (depend on your application requirements)
    # service nginx restart

>> Install Node.js (13.x for now):

    # curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
    # apt-get install -y nodejs gcc g++ make && node -v

>> Install some global NPM packages:

    # npm install -g gulp pm2 express-generator create-react-app

>> Setup PM2 on system startup:

    # pm2 startup

>> Ensure the time zone to be 'Asia/Tehran':

    # timedatectl
    -> If it is not correct, find your time zone and set it
    # timedatectl list-timezones
    # timedatectl set-timezone Asia/Tehran

>> Install & configure git:

    # apt install -y git && git config --global user.email "ahs502@gmail.com"; git config --global user.name "Hessamoddin A Shokravi"

>> Install Cloud9:

    -> See: https://github.com/c9/core/
    # git clone https://github.com/c9/core.git c9sdk && cd c9sdk && scripts/install-sdk.sh; cd
    -> To update to the latest version:
    c9sdk# git pull origin master && scripts/install-sdk.sh

>> Run Cloud9 forever:

    # pm2 start ~/c9sdk/server.js -n c9 -- --auth "root:c9password" --listen 0.0.0.0 -w / --port 8080
    # pm2 save
    -> Check if Cloud9 IDE is running well:
    # pm2 list
    # pm2 logs c9
    -> If it has the error "Error: Cannot find module 'c9/urls'" maybe this would fix the problem:
    # cd c9sdk && git reset --hard; cd

>> Create a new SSH key and add it to remote repository service's account:

    -> See: https://help.github.com/articles/connecting-to-github-with-ssh/
    # ssh-keygen -t rsa -b 4096 -C "ahs502@gmail.com"
    # eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa && cat .ssh/id_rsa.pub

>> Ensure the DNS (Domain Name Service) works fine:

    -> Test 'ping' or 'nslookup' on a domain to see if it can resolve it or not. If not do the following:
    # nano /etc/network/interfaces
    -> Below the line "iface eth0 inet static" append this line: "dns-nameservers 8.8.8.8 8.8.4.4".
    # /etc/init.d/networking restart
    -> If still 'ping' or 'nslookup' can not resolve a domain, reboot the server.

>> Get VPS project:

    # git clone git@github.com:ahs502/VPS.git && cd VPS/ && npm i

>> Configure Bind9 and Nginx: (Within the 'VPS/' folder)

    VPS# nano config.js
    -> Configure the settings.
    -> If there are not any domains with https protocol then run:
    VPS# npm run config
    -> Otherwise, run this so you can make SSL certificates later:
    VPS# npm run config:ns
    -> Then you are able to make SSL certificates, and after that run "npm run config" again
       to apply those certificates to the domains.
    VPS# cd ..

>> Add '~/VPS/bin' to PATH:

    -> Do this for users other than root too:
    # echo 'export PATH="/root/VPS/bin:$PATH"' >> ~/.bashrc
    # source ~/.bashrc   # Opional, you can also restart terminal

>> Make SSL certificates with certbot: (See: https://certbot.eff.org/#ubuntuxenial-nginx)

    # apt install -y software-properties-common
    -> Install certbot:
    # add-apt-repository ppa:certbot/certbot
    # apt-get update
    # apt-get install -y certbot python-certbot-nginx

    -> Make sure you've turned off Nginx first:
    # service nginx stop

    -> Create certificates: (You may use 'standalone' mode, make sure to set the websites' name servers before)
    # certbot certonly
    -> Or simply: (You may specify some other domains)
    # certbot certonly --standalone -d ahs502.ir -d www.ahs502.ir

    -> You can turn on enginx again:
    # service nginx start

    -> Renew all certificates (Every three months for example):
    # certbot renew --dry-run
    -> Or this combination:
    # service nginx stop && certbot renew --dry-run && service nginx start
    
    -> In case of forgetting to renew, and expiring the certificates, simply delete them and generate them again:
    # certbot delete   # Then select the domain, or:
    # certbot delete --cert-name ahs502.ir
    
>> Setup Dropbox service:

    # cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
    # ~/.dropbox-dist/dropboxd
    -> You may need to follow the provided link to add this device to your Dropbox account.
    -> It will run Dropbox and make Dropbox folder, but stops by Ctrl+C. To install Dropbox cli:
    # wget -O /usr/local/bin/dropbox "https://www.dropbox.com/download?dl=packages/dropbox.py" && chmod +x /usr/local/bin/dropbox
    # dropbox start
    # dropbox status
    -> To make it run forever, create this file:
    # nano /etc/systemd/system/dropbox.service
    -> Fill it by:
--------------------------------------------------------------------------------
[Unit]
Description=Dropbox Service
After=network.target

[Service]
ExecStart=/bin/sh -c '/usr/local/bin/dropbox start'
ExecStop=/bin/sh -c '/usr/local/bin/dropbox stop'
PIDFile=${HOME}/.dropbox/dropbox.pid
User=root
Group=sudo
Type=forking
Restart=on-failure
RestartSec=5
StartLimitInterval=60s
StartLimitBurst=3

[Install]
WantedBy=multi-user.target
--------------------------------------------------------------------------------
    # systemctl daemon-reload && systemctl enable dropbox
    # systemctl start dropbox
    # systemctl status dropbox   # If not activated yet, try starting it again.

>> Restore backup data from Dropbox into their project folders:

    ???

>> Setup periodic auto-backup data folders into the Dropbox:

    -> Create the backup folder if not exists:
    # mkdir /root/Dropbox/ahs502.ir && mkdir /root/Dropbox/ahs502.ir/data
    -> Add periodic tasks to the file /etc/crontab (The other lines are just examples, no need to copy them):
    # nano /etc/crontab
--------------------------------------------------------------------------------
@hourly root rsync -av --delete /root/ahs502/apps/data/ /root/Dropbox/ahs502.ir/data

@hourly root rsync -av --delete /root/ahs502/balance-statistics/data/ Dropbox/backup/eco
@hourly root rsync -av --delete /root/ahs502/online-shopping-list/data/ Dropbox/backup/shop
@hourly root rsync -av --delete /root/ahs502/prayers-counter/data/ Dropbox/backup/mn

@daily root rsync -av --delete /root/sites/javab-azmayesh/live/data Dropbox/backup/ja/data
@daily root rsync -av --delete /root/sites/javab-azmayesh/live/files Dropbox/backup/ja/files
--------------------------------------------------------------------------------
    -> Save the file, all done.

>> Get ahs502.ir project:

    # mkdir ahs502 && cd ahs502 && git clone git@github.com:ahs502/apps.git && npm install --prefix apps && cd
    -> Start the server (Use the same port you've set in VPS/config.js for 'ahs502.ir'):
    # PORT=8010 pm2 start -n ahs502 npm -- start --prefix ~/ahs502/apps
    # pm2 save
    
    -> In order to update ahs502.ir:
    # ahs502

>> Transport other files to the new server:

    -> First, remove any website code files from sites/ folder, then at source server:
    # zip -0 -q -r data.zip sites ahs502 projects   # List all files/folders you want to transport
    # scp data.zip root@ahs502.ir:/root && rm data.zip
    
    -> And at destination server:
    # unzip -q data.zip && rm data.zip

>> Get JavabAzmayesh project:

    # git clone git@gitlab.com:ahs502/javab-azmayesh.git; cd javab-azmayesh/
    javab-azmayesh# sudo npm i   # 'sudo' is needed
    javab-azmayesh# cd

>> Deploy the JavabAzmayesh websites you want:

    # ja deploy test
    # ja deploy demo
    ...

>> Start other services:

    # pm2 start ~/ahs502/balance-statistics/bin/www -n eco
    # pm2 start ~/ahs502/online-shopping-list/bin/www -n shop
    # pm2 start ~/ahs502/prayers-counter/bin/www -n mn
    ...
    # pm2 save





